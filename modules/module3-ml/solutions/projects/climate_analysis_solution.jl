# Projet Final 2 : Analyse Climatique Sahel
# Module 3 : Apprentissage Automatique avec Julia  
# Dur√©e : 3 heures | Difficult√© : Expert | Impact : üåç Adaptation Climatique

# üìö AVANT DE COMMENCER
# Lisez le r√©sum√© de projet : resume_projet_climat.md
# Ce projet applique l'IA √† l'adaptation au changement climatique !

println("üìö Consultez le r√©sum√© : modules/module3-ml/resume_projet_climat.md")
println("Appuyez sur Entr√©e quand vous √™tes pr√™t pour l'analyse climatique...")
readline()

println("üå°Ô∏èüöÄ ANALYSE CLIMATIQUE SAH√âLIENNE - PROJET FINAL")
println("="^70)
println("üéØ Mission : Cr√©er un syst√®me d'analyse climatique pr√©dictive")
println("   pour l'adaptation aux changements climatiques au Sahel !")
println("="^70)

# ============================================================================
# PHASE 1 : ARCHITECTURE CLIMATIQUE ET CONFIGURATION (25 minutes)
# ============================================================================

println("\nüåç PHASE 1 : ARCHITECTURE SYST√àME CLIMATIQUE")
println("-"^50)

# Environnement scientifique complet
using DataFrames, CSV, Statistics, Random
using Plots, StatsPlots, PlotlyJS
using Dates, TimeZones
using MLJ, MLJModels
using DSP, FFTW  # Analyse de signaux climatiques
using Clustering, MultivariateStats  # Analyse patterns
using JSON3, FileIO
using LinearAlgebra, StatsBase
using ProgressMeter

# Configuration scientifique
Random.seed!(2024)
plotlyjs()
theme(:bright)

println("‚úÖ Environnement analyse climatique configur√©")

# Structures de donn√©es climatiques sp√©cialis√©es
@kwdef struct StationM√©t√©o
    nom::String
    code::String
    latitude::Float64
    longitude::Float64
    altitude_m::Int
    zone_climatique::String  # "Sah√©lienne", "Soudano-Sah√©lienne", "Soudanienne"
    type_station::String     # "Principale", "Secondaire", "Automatique"
    date_installation::Date
    actif::Bool
end

@kwdef struct ObservationClimatique
    station_code::String
    date::Date
    temp√©rature_min_c::Float64
    temp√©rature_max_c::Float64
    temp√©rature_moy_c::Float64
    pr√©cipitations_mm::Float64
    humidit√©_relative_pct::Float64
    pression_hpa::Float64
    vitesse_vent_ms::Float64
    direction_vent_deg::Float64
    rayonnement_solaire_mjm2::Float64
    √©vapotranspiration_mm::Float64
    indice_aridit√©::Float64
end

@kwdef struct IndicateursClimatiques
    station::String
    ann√©e::Int
    
    # Temp√©rature
    temp_moyenne_annuelle::Float64
    temp_max_absolue::Float64
    temp_min_absolue::Float64
    amplitude_thermique::Float64
    jours_chaleur_extr√™me::Int  # >40¬∞C
    jours_gel::Int  # <0¬∞C
    
    # Pr√©cipitations  
    pr√©cip_totale_annuelle::Float64
    pr√©cip_saison_pluies::Float64  # Juin-Septembre
    pr√©cip_max_journali√®re::Float64
    jours_pluie::Int
    jours_pluie_intense::Int  # >20mm
    d√©but_saison_pluies::Date
    fin_saison_pluies::Date
    dur√©e_saison_pluies::Int
    
    # S√©cheresse
    jours_sans_pluie_cons√©cutifs_max::Int
    d√©ficit_hydrique_mm::Float64
    indice_s√©cheresse_palmer::Float64
    
    # Extr√™mes
    nb_√©v√©nements_extr√™mes::Int
    indice_vuln√©rabilit√©::Float64
end

println("‚úÖ Structures climatiques sah√©liennes d√©finies")

# Cr√©ation du r√©seau de stations m√©t√©orologiques r√©aliste
println("\nüåê Cr√©ation du r√©seau de stations m√©t√©orologiques...")

stations_m√©t√©o = [
    # Stations principales (donn√©es historiques longues)
    StationM√©t√©o(
        nom="Ouagadougou A√©roport",
        code="BF001",
        latitude=12.3533, longitude=-1.5242,
        altitude_m=306,
        zone_climatique="Soudano-Sah√©lienne",
        type_station="Principale",
        date_installation=Date(1961, 1, 1),
        actif=true
    ),
    StationM√©t√©o(
        nom="Bobo-Dioulasso",
        code="BF002", 
        latitude=11.1609, longitude=-4.3147,
        altitude_m=461,
        zone_climatique="Soudanienne",
        type_station="Principale",
        date_installation=Date(1956, 1, 1),
        actif=true
    ),
    StationM√©t√©o(
        nom="Dori",
        code="BF003",
        latitude=14.0354, longitude=-0.0347,
        altitude_m=277,
        zone_climatique="Sah√©lienne", 
        type_station="Principale",
        date_installation=Date(1965, 1, 1),
        actif=true
    ),
    StationM√©t√©o(
        nom="Gaoua",
        code="BF004",
        latitude=10.3341, longitude=-3.1816,
        altitude_m=336,
        zone_climatique="Soudanienne",
        type_station="Principale",
        date_installation=Date(1971, 1, 1),
        actif=true
    ),
    StationM√©t√©o(
        nom="Fada N'Gourma",
        code="BF005",
        latitude=12.0614, longitude=0.3648,
        altitude_m=292,
        zone_climatique="Soudano-Sah√©lienne",
        type_station="Secondaire",
        date_installation=Date(1978, 1, 1),
        actif=true
    ),
    StationM√©t√©o(
        nom="Koudougou",
        code="BF006",
        latitude=12.2530, longitude=-2.3622,
        altitude_m=274,
        zone_climatique="Soudano-Sah√©lienne",
        type_station="Secondaire", 
        date_installation=Date(1980, 1, 1),
        actif=true
    ),
    StationM√©t√©o(
        nom="Banfora",
        code="BF007",
        latitude=10.6333, longitude=-4.7500,
        altitude_m=271,
        zone_climatique="Soudanienne",
        type_station="Secondaire",
        date_installation=Date(1985, 1, 1),
        actif=true
    ),
    StationM√©t√©o(
        nom="Djibo",
        code="BF008",
        latitude=14.1025, longitude=-1.6278,
        altitude_m=286,
        zone_climatique="Sah√©lienne",
        type_station="Secondaire",
        date_installation=Date(1990, 1, 1),
        actif=true
    ),
    StationM√©t√©o(
        nom="Tenkodogo", 
        code="BF009",
        latitude=11.7833, longitude=-0.3700,
        altitude_m=281,
        zone_climatique="Soudano-Sah√©lienne",
        type_station="Automatique",
        date_installation=Date(2005, 1, 1),
        actif=true
    ),
    StationM√©t√©o(
        nom="Manga",
        code="BF010",
        latitude=11.6647, longitude=-1.0775,
        altitude_m=295,
        zone_climatique="Soudano-Sah√©lienne",
        type_station="Automatique",
        date_installation=Date(2010, 1, 1),
        actif=true
    )
]

println("‚úÖ R√©seau de $(length(stations_m√©t√©o)) stations m√©t√©orologiques cr√©√©")

# ============================================================================
# PHASE 2 : G√âN√âRATION DONN√âES CLIMATIQUES HISTORIQUES (35 minutes)
# ============================================================================

println("\nüìä PHASE 2 : G√âN√âRATION DONN√âES CLIMATIQUES HISTORIQUES")
println("-"^50)

# Fonction de g√©n√©ration de donn√©es climatiques r√©alistes avec tendances
function g√©n√©rer_s√©rie_climatique_r√©aliste(station::StationM√©t√©o, ann√©es::UnitRange{Int})
    observations = ObservationClimatique[]
    
    println("G√©n√©ration s√©rie climatique $(station.nom) ($(length(ann√©es)) ann√©es)...")
    
    @showprogress for ann√©e in ann√©es
        for jour in 1:365  # Simplification : 365 jours par an
            try
                date = Date(ann√©e, 1, 1) + Day(jour - 1)
                jour_ann√©e = dayofyear(date)
                mois = month(date)
                
                # Tendance climatique √† long terme (r√©chauffement)
                tendance_temp = (ann√©e - 1980) * 0.015  # +1.5¬∞C par d√©cennie depuis 1980
                tendance_pr√©cip = (ann√©e - 1980) * -0.5  # -5mm par d√©cennie
                
                # Temp√©rature de base selon zone climatique et altitude
                temp_base = Dict(
                    "Sah√©lienne" => 30.0,
                    "Soudano-Sah√©lienne" => 28.0,
                    "Soudanienne" => 26.0
                )[station.zone_climatique]
                
                # Correction altitudinale (-0.6¬∞C par 100m)
                temp_base -= (station.altitude_m - 300) * 0.006
                
                # Cycle saisonnier r√©aliste
                temp_saisonni√®re = temp_base + tendance_temp + 
                                 12 * sin(2œÄ * (jour_ann√©e - 80) / 365)  # Peak avril
                
                # Variabilit√© quotidienne et ann√©e El Ni√±o/La Ni√±a
                variabilit√©_interannuelle = sin(2œÄ * ann√©e / 7) * 2  # Cycle ~7 ans
                temp_moy = temp_saisonni√®re + variabilit√©_interannuelle + randn() * 2
                
                # Amplitude diurne selon saison et zone
                amplitude_diurne = station.zone_climatique == "Sah√©lienne" ? 
                                 15 + 5 * sin(2œÄ * jour_ann√©e / 365) :  # Sahel: 10-20¬∞C
                                 12 + 3 * sin(2œÄ * jour_ann√©e / 365)   # Sud: 9-15¬∞C
                
                temp_max = temp_moy + amplitude_diurne / 2 + rand() * 3
                temp_min = temp_moy - amplitude_diurne / 2 - rand() * 3
                
                # Pr√©cipitations : pattern sah√©lien r√©aliste
                pr√©cip_base = Dict(
                    "Sah√©lienne" => 300,
                    "Soudano-Sah√©lienne" => 700,
                    "Soudanienne" => 1100
                )[station.zone_climatique]
                
                pr√©cip_annuelle = pr√©cip_base + tendance_pr√©cip + 
                                variabilit√©_interannuelle * 50
                
                if mois in [6, 7, 8, 9]  # Saison des pluies
                    # Distribution gamma r√©aliste des pluies
                    prob_pluie = mois in [7, 8] ? 0.4 : 0.25
                    
                    if rand() < prob_pluie
                        # Intensit√© selon distribution observ√©e
                        if rand() < 0.6  # 60% pluies faibles
                            intensit√© = abs(randn()) * 5 + 2  # 2-10mm
                        elseif rand() < 0.9  # 30% pluies mod√©r√©es  
                            intensit√© = abs(randn()) * 15 + 10  # 10-40mm
                        else  # 10% pluies intenses
                            intensit√© = abs(randn()) * 30 + 40  # 40-100mm
                        end
                        pr√©cip = min(intensit√©, 150)  # Cap r√©aliste
                    else
                        pr√©cip = 0.0
                    end
                    
                    # Ajustement facteur mensuel
                    facteur_mensuel = Dict(6 => 0.6, 7 => 1.2, 8 => 1.3, 9 => 0.8)[mois]
                    pr√©cip *= facteur_mensuel
                    
                elseif mois in [5, 10]  # D√©but/fin saison
                    pr√©cip = rand() < 0.1 ? abs(randn()) * 15 : 0.0
                else  # Saison s√®che
                    pr√©cip = rand() < 0.02 ? abs(randn()) * 5 : 0.0  # Pluies rares
                end
                
                # Variables d√©riv√©es r√©alistes
                # Humidit√© relative (anticorr√©l√©e avec temp√©rature)
                humidit√©_base = station.zone_climatique == "Sah√©lienne" ? 35 : 55
                humidit√© = humidit√©_base + (pr√©cip > 0 ? 20 : 0) - 
                          (temp_max - 25) * 0.5 + randn() * 8
                humidit√© = clamp(humidit√©, 10, 95)
                
                # Pression atmosph√©rique (effet altitude + m√©t√©o)
                pression_base = 1013 - station.altitude_m * 0.12  # hPa
                pression = pression_base + randn() * 5  # Variabilit√© m√©t√©o
                
                # Vent (plus fort en saison s√®che)
                vent_base = mois in [11, 12, 1, 2, 3] ? 4.5 : 2.5  # m/s
                vent = vent_base + abs(randn()) * 2
                direction_vent = rand(0:359)  # Direction al√©atoire
                
                # Rayonnement solaire (fonction n√©bulosit√© estim√©e)
                rayonnement_max = 25 - 5 * sin(2œÄ * (jour_ann√©e - 172) / 365)  # MJ/m¬≤
                n√©bulosit√© = pr√©cip > 5 ? 0.7 : 0.2  # Couverture nuageuse
                rayonnement = rayonnement_max * (1 - n√©bulosit√©) + randn() * 2
                rayonnement = max(5, rayonnement)
                
                # √âvapotranspiration (Penman-Monteith simplifi√©)
                delta_t = temp_max - temp_min
                etp = 0.0023 * (temp_moy + 17.8) * sqrt(delta_t) * 
                      (rayonnement / 2.45) * (1 + vent / 10)
                etp = max(0, etp)
                
                # Indice d'aridit√© de De Martonne
                indice_aridit√© = pr√©cip / (temp_moy + 10)
                
                # Cr√©er observation
                obs = ObservationClimatique(
                    station_code=station.code,
                    date=date,
                    temp√©rature_min_c=temp_min,
                    temp√©rature_max_c=temp_max,
                    temp√©rature_moy_c=(temp_min + temp_max) / 2,
                    pr√©cipitations_mm=pr√©cip,
                    humidit√©_relative_pct=humidit√©,
                    pression_hpa=pression,
                    vitesse_vent_ms=vent,
                    direction_vent_deg=direction_vent,
                    rayonnement_solaire_mjm2=rayonnement,
                    √©vapotranspiration_mm=etp,
                    indice_aridit√©=indice_aridit√©
                )
                
                push!(observations, obs)
                
            catch e
                # G√©rer les dates invalides (29 f√©vrier ann√©es non bissextiles)
                continue
            end
        end
    end
    
    return observations
end

# G√©n√©ration du dataset climatique complet (1990-2023)
println("G√©n√©ration des s√©ries climatiques historiques...")

ann√©es_analyse = 1990:2023
dataset_climatique = DataFrame()

@showprogress "Stations climatiques..." for station in stations_m√©t√©o[1:6]  # 6 stations principales
    # G√©n√©rer donn√©es selon anciennet√© station
    ann√©es_station = max(year(station.date_installation), 1990):2023
    
    observations_station = g√©n√©rer_s√©rie_climatique_r√©aliste(station, ann√©es_station)
    
    # Convertir en DataFrame
    for obs in observations_station
        push!(dataset_climatique, (
            station_code=obs.station_code,
            station_nom=station.nom,
            zone_climatique=station.zone_climatique,
            latitude=station.latitude,
            longitude=station.longitude,
            altitude=station.altitude_m,
            date=obs.date,
            ann√©e=year(obs.date),
            mois=month(obs.date),
            jour_ann√©e=dayofyear(obs.date),
            temp_min=obs.temp√©rature_min_c,
            temp_max=obs.temp√©rature_max_c,
            temp_moy=obs.temp√©rature_moy_c,
            pr√©cip=obs.pr√©cipitations_mm,
            humidit√©=obs.humidit√©_relative_pct,
            pression=obs.pression_hpa,
            vent=obs.vitesse_vent_ms,
            direction_vent=obs.direction_vent_deg,
            rayonnement=obs.rayonnement_solaire_mjm2,
            etp=obs.√©vapotranspiration_mm,
            indice_aridit√©=obs.indice_aridit√©
        ))
    end
end

println("‚úÖ Dataset climatique g√©n√©r√© : $(nrow(dataset_climatique)) observations")
println("P√©riode : $(minimum(dataset_climatique.ann√©e)) - $(maximum(dataset_climatique.ann√©e))")
println("Stations : $(length(unique(dataset_climatique.station_code)))")

# ============================================================================
# PHASE 3 : ANALYSE EXPLORATOIRE CLIMATIQUE (30 minutes)
# ============================================================================

println("\nüå°Ô∏è PHASE 3 : ANALYSE EXPLORATOIRE CLIMATIQUE SAH√âLIENNE")
println("-"^50)

# Statistiques climatiques g√©n√©rales
println("üìà Statistiques climatiques g√©n√©rales :")
stats_climat = describe(dataset_climatique[!, [:temp_moy, :pr√©cip, :humidit√©, :etp]])
println(stats_climat)

# Tendances par zone climatique
println("\nüåç Comparaison par zone climatique :")
stats_zones = combine(groupby(dataset_climatique, :zone_climatique),
    :temp_moy => mean => :temp_moyenne,
    :pr√©cip => sum => :pr√©cip_totale,
    :etp => sum => :etp_totale,
    :indice_aridit√© => mean => :aridit√©_moyenne
)
sort!(stats_zones, :temp_moyenne, rev=true)
println(stats_zones)

# Analyses temporelles avanc√©es
println("\nüìä Analyse des tendances temporelles...")

# 1. Tendances annuelles par station
tendances_annuelles = combine(
    groupby(dataset_climatique, [:station_code, :station_nom, :zone_climatique, :ann√©e]),
    :temp_moy => mean => :temp_annuelle,
    :pr√©cip => sum => :pr√©cip_annuelle,
    :etp => sum => :etp_annuelle
)

# 2. √âvolution temp√©rature par zone
√©vol_temp_zone = combine(
    groupby(tendances_annuelles, [:zone_climatique, :ann√©e]),
    :temp_annuelle => mean => :temp_moy_zone
)

# Visualisation 1 : √âvolution temp√©rature par zone climatique
p1 = plot(title="√âvolution Temp√©rature par Zone Climatique - Sahel",
          xlabel="Ann√©e", ylabel="Temp√©rature Moyenne (¬∞C)",
          legend=:topleft, size=(900, 500))

zones = unique(√©vol_temp_zone.zone_climatique)
couleurs = [:red, :orange, :green]

for (i, zone) in enumerate(zones)
    donn√©es_zone = filter(row -> row.zone_climatique == zone, √©vol_temp_zone)
    plot!(donn√©es_zone.ann√©e, donn√©es_zone.temp_moy_zone,
          label=zone, color=couleurs[i], linewidth=3, marker=:circle)
    
    # Ligne de tendance
    if nrow(donn√©es_zone) > 5
        using GLM
        model_trend = lm(@formula(temp ~ ann√©e), 
                        DataFrame(temp=donn√©es_zone.temp_moy_zone, 
                                ann√©e=donn√©es_zone.ann√©e))
        y_trend = predict(model_trend, DataFrame(ann√©e=donn√©es_zone.ann√©e))
        plot!(donn√©es_zone.ann√©e, y_trend, 
              color=couleurs[i], linestyle=:dash, alpha=0.7, label="")
    end
end

display(p1)

# Visualisation 2 : Pr√©cipitations annuelles avec variabilit√©
√©vol_pr√©cip = combine(
    groupby(tendances_annuelles, [:zone_climatique, :ann√©e]),
    :pr√©cip_annuelle => mean => :pr√©cip_moy,
    :pr√©cip_annuelle => std => :pr√©cip_std
)

p2 = plot(title="Pr√©cipitations Annuelles avec Variabilit√© - Sahel",
          xlabel="Ann√©e", ylabel="Pr√©cipitations (mm)",
          legend=:topright, size=(900, 500))

for (i, zone) in enumerate(zones)
    donn√©es_zone = filter(row -> row.zone_climatique == zone, √©vol_pr√©cip)
    
    # Remplacer missing par 0 pour std
    donn√©es_zone.pr√©cip_std = coalesce.(donn√©es_zone.pr√©cip_std, 0)
    
    plot!(donn√©es_zone.ann√©e, donn√©es_zone.pr√©cip_moy,
          ribbon=donn√©es_zone.pr√©cip_std,
          label=zone, color=couleurs[i], alpha=0.3,
          linewidth=2, marker=:circle, markersize=3)
end

display(p2)

# Visualisation 3 : Cycle saisonnier moyen par zone
cycle_saisonnier = combine(
    groupby(dataset_climatique, [:zone_climatique, :mois]),
    :temp_moy => mean => :temp_mensuelle,
    :pr√©cip => mean => :pr√©cip_mensuelle
)

p3 = plot(title="Cycles Saisonniers - Temp√©rature et Pr√©cipitations",
          layout=(2, 1), size=(900, 800))

# Temp√©rature
for (i, zone) in enumerate(zones)
    donn√©es_zone = filter(row -> row.zone_climatique == zone, cycle_saisonnier)
    sort!(donn√©es_zone, :mois)
    
    plot!(donn√©es_zone.mois, donn√©es_zone.temp_mensuelle,
          subplot=1, label=zone, color=couleurs[i], linewidth=3,
          ylabel="Temp√©rature (¬∞C)", marker=:circle)
end

# Pr√©cipitations  
for (i, zone) in enumerate(zones)
    donn√©es_zone = filter(row -> row.zone_climatique == zone, cycle_saisonnier)
    sort!(donn√©es_zone, :mois)
    
    plot!(donn√©es_zone.mois, donn√©es_zone.pr√©cip_mensuelle,
          subplot=2, label="", color=couleurs[i], linewidth=3,
          xlabel="Mois", ylabel="Pr√©cipitations (mm)",
          xticks=(1:12, ["J","F","M","A","M","J","J","A","S","O","N","D"]))
end

display(p3)

# Visualisation 4 : Carte climatique du Burkina Faso
moyennes_station = combine(
    groupby(dataset_climatique, [:station_code, :station_nom, :latitude, :longitude, :zone_climatique]),
    :temp_moy => mean => :temp_moy_station,
    :pr√©cip => (x -> sum(x) / length(unique(dataset_climatique[dataset_climatique.station_code .== first(x), :ann√©e]))) => :pr√©cip_annuelle_moy
)

p4 = scatter(moyennes_station.longitude, moyennes_station.latitude,
    zcolor=moyennes_station.temp_moy_station,
    markersize=sqrt.(moyennes_station.pr√©cip_annuelle_moy / 50),
    title="Carte Climatique Burkina Faso - Temp√©rature et Pr√©cipitations",
    xlabel="Longitude", ylabel="Latitude",
    colorbar_title="Temp√©rature Moyenne (¬∞C)",
    size=(800, 600))

# Labels stations
for row in eachrow(moyennes_station)
    annotate!(row.longitude, row.latitude + 0.1,
              text(split(row.station_nom, " ")[1], 8, :center))
end

# L√©gende taille = pr√©cipitations
annotate!(-4.5, 13.8, text("Taille ‚àù Pr√©cipitations", 10, :left))

display(p4)

# Visualisation 5 : Matrice de corr√©lation variables climatiques
variables_corr = [:temp_moy, :pr√©cip, :humidit√©, :pression, :vent, :rayonnement, :etp, :indice_aridit√©]
n_vars = length(variables_corr)
matrice_corr = zeros(n_vars, n_vars)

# Calculer corr√©lations sur √©chantillon (performance)
√©chantillon = dataset_climatique[1:10000, :]  # 10k observations

for i in 1:n_vars, j in 1:n_vars
    matrice_corr[i,j] = cor(√©chantillon[!, variables_corr[i]], 
                           √©chantillon[!, variables_corr[j]])
end

labels_corr = ["Temp", "Pr√©cip", "Humid", "Press", "Vent", "Rayon", "ETP", "Arid"]
p5 = heatmap(labels_corr, labels_corr, matrice_corr,
    title="Matrice Corr√©lations Variables Climatiques",
    color=:RdBu_r, aspect_ratio=1, size=(600, 600))

# Ajouter valeurs
for i in 1:n_vars, j in 1:n_vars
    annotate!(i, j, text(round(matrice_corr[i,j], digits=2), 
                        9, :center, :white))
end

display(p5)

println("‚úÖ Analyse exploratoire termin√©e - 5 visualisations cr√©√©es")

# ============================================================================
# PHASE 4 : D√âTECTION √âV√âNEMENTS EXTR√äMES (25 minutes)
# ============================================================================

println("\n‚ö†Ô∏è PHASE 4 : D√âTECTION D'√âV√âNEMENTS CLIMATIQUES EXTR√äMES")
println("-"^50)

# Fonction de d√©tection d'√©v√©nements extr√™mes
function d√©tecter_√©v√©nements_extr√™mes(df::DataFrame, station_code::String)
    donn√©es_station = filter(row -> row.station_code == station_code, df)
    
    if nrow(donn√©es_station) < 100
        return DataFrame()  # Pas assez de donn√©es
    end
    
    √©v√©nements = DataFrame()
    
    # 1. Vagues de chaleur (3+ jours cons√©cutifs > percentile 95)
    seuil_chaleur = quantile(donn√©es_station.temp_max, 0.95)
    
    jours_chauds = donn√©es_station.temp_max .> seuil_chaleur
    s√©quences_chaleur = []
    d√©but_s√©quence = nothing
    
    for (i, chaud) in enumerate(jours_chauds)
        if chaud && d√©but_s√©quence === nothing
            d√©but_s√©quence = i
        elseif !chaud && d√©but_s√©quence !== nothing
            if i - d√©but_s√©quence >= 3  # Au moins 3 jours
                push!(s√©quences_chaleur, (d√©but_s√©quence, i-1))
            end
            d√©but_s√©quence = nothing
        end
    end
    
    # Derni√®re s√©quence si elle va jusqu'√† la fin
    if d√©but_s√©quence !== nothing && length(jours_chauds) - d√©but_s√©quence >= 2
        push!(s√©quences_chaleur, (d√©but_s√©quence, length(jours_chauds)))
    end
    
    for (d√©but, fin) in s√©quences_chaleur
        push!(√©v√©nements, (
            station_code = station_code,
            type_√©v√©nement = "Vague de chaleur",
            date_d√©but = donn√©es_station[d√©but, :date],
            date_fin = donn√©es_station[fin, :date],
            dur√©e_jours = fin - d√©but + 1,
            intensit√© = mean(donn√©es_station[d√©but:fin, :temp_max]),
            impact_estim√© = "√âlev√©"
        ))
    end
    
    # 2. S√©cheresses (30+ jours cons√©cutifs sans pluie significative)
    jours_secs = donn√©es_station.pr√©cip .< 1.0
    s√©quences_s√®ches = []
    d√©but_s√®che = nothing
    
    for (i, sec) in enumerate(jours_secs)
        if sec && d√©but_s√®che === nothing
            d√©but_s√®che = i
        elseif !sec && d√©but_s√®che !== nothing
            if i - d√©but_s√®che >= 30  # Au moins 30 jours
                push!(s√©quences_s√®ches, (d√©but_s√®che, i-1))
            end
            d√©but_s√®che = nothing
        end
    end
    
    if d√©but_s√®che !== nothing && length(jours_secs) - d√©but_s√®che >= 29
        push!(s√©quences_s√®ches, (d√©but_s√®che, length(jours_secs)))
    end
    
    for (d√©but, fin) in s√©quences_s√®ches
        push!(√©v√©nements, (
            station_code = station_code,
            type_√©v√©nement = "S√©cheresse",
            date_d√©but = donn√©es_station[d√©but, :date],
            date_fin = donn√©es_station[fin, :date],
            dur√©e_jours = fin - d√©but + 1,
            intensit√© = mean(donn√©es_station[d√©but:fin, :temp_moy]),
            impact_estim√© = "Tr√®s √©lev√©"
        ))
    end
    
    # 3. Pluies intenses (> percentile 99)
    seuil_pluie_intense = quantile(filter(x -> x > 0, donn√©es_station.pr√©cip), 0.99)
    
    jours_pluie_intense = findall(donn√©es_station.pr√©cip .> seuil_pluie_intense)
    
    for jour in jours_pluie_intense
        push!(√©v√©nements, (
            station_code = station_code,
            type_√©v√©nement = "Pluie intense",
            date_d√©but = donn√©es_station[jour, :date],
            date_fin = donn√©es_station[jour, :date],
            dur√©e_jours = 1,
            intensit√© = donn√©es_station[jour, :pr√©cip],
            impact_estim√© = "Mod√©r√©"
        ))
    end
    
    return √©v√©nements
end

# D√©tection √©v√©nements pour toutes les stations
println("D√©tection des √©v√©nements extr√™mes...")

tous_√©v√©nements = DataFrame()
stations_codes = unique(dataset_climatique.station_code)

@showprogress "D√©tection √©v√©nements..." for station_code in stations_codes
    √©v√©nements_station = d√©tecter_√©v√©nements_extr√™mes(dataset_climatique, station_code)
    if nrow(√©v√©nements_station) > 0
        tous_√©v√©nements = vcat(tous_√©v√©nements, √©v√©nements_station)
    end
end

println("‚úÖ $(nrow(tous_√©v√©nements)) √©v√©nements extr√™mes d√©tect√©s")

# Statistiques √©v√©nements
println("\nüìä Statistiques √©v√©nements extr√™mes :")
stats_√©v√©nements = combine(groupby(tous_√©v√©nements, :type_√©v√©nement),
    nrow => :nb_√©v√©nements,
    :dur√©e_jours => mean => :dur√©e_moyenne,
    :dur√©e_jours => maximum => :dur√©e_max
)
println(stats_√©v√©nements)

# √âv√©nements par ann√©e
√©vol_√©v√©nements = combine(
    groupby(tous_√©v√©nements, [groupby(tous_√©v√©nements, :date_d√©but) |> x -> year.(x.date_d√©but), :type_√©v√©nement]),
    nrow => :nb_√©v√©nements_ann√©e
)

rename!(√©vol_√©v√©nements, :x1 => :ann√©e)

# Visualisation √©volution √©v√©nements extr√™mes
p_√©v√©nements = plot(title="√âvolution √âv√©nements Climatiques Extr√™mes - Sahel",
                   xlabel="Ann√©e", ylabel="Nombre d'√âv√©nements",
                   legend=:topleft, size=(900, 500))

types_√©v√©nements = unique(√©vol_√©v√©nements.type_√©v√©nement)
couleurs_√©v√©nements = [:red, :brown, :blue]

for (i, type_evt) in enumerate(types_√©v√©nements)
    donn√©es_type = filter(row -> row.type_√©v√©nement == type_evt, √©vol_√©v√©nements)
    
    # Cr√©er s√©rie compl√®te avec 0 pour ann√©es manquantes
    ann√©es_compl√®tes = 1990:2023
    s√©rie_compl√®te = DataFrame(ann√©e = collect(ann√©es_compl√®tes))
    donn√©es_type_compl√®te = leftjoin(s√©rie_compl√®te, donn√©es_type, on=:ann√©e)
    replace!(donn√©es_type_compl√®te.nb_√©v√©nements_ann√©e, missing => 0)
    
    plot!(donn√©es_type_compl√®te.ann√©e, donn√©es_type_compl√®te.nb_√©v√©nements_ann√©e,
          label=type_evt, color=couleurs_√©v√©nements[i], 
          linewidth=2, marker=:circle, markersize=4)
end

display(p_√©v√©nements)

println("‚úÖ Analyse √©v√©nements extr√™mes termin√©e")

# ============================================================================
# PHASE 5 : MOD√âLISATION PR√âDICTIVE CLIMATIQUE (35 minutes)
# ============================================================================

println("\nü§ñ PHASE 5 : MOD√âLISATION PR√âDICTIVE CLIMATIQUE")
println("-"^50)

# Pr√©paration donn√©es pour pr√©diction de temp√©rature future
println("Pr√©paration des donn√©es pour mod√©lisation pr√©dictive...")

# Agr√©gation mensuelle pour analyse de s√©ries temporelles
donn√©es_mensuelles = combine(
    groupby(dataset_climatique, [:station_code, :station_nom, :zone_climatique, :ann√©e, :mois]),
    :temp_moy => mean => :temp_mensuelle,
    :pr√©cip => sum => :pr√©cip_mensuelle,
    :humidit√© => mean => :humidit√©_mensuelle,
    :etp => sum => :etp_mensuelle
)

# Cr√©er features temporelles pour ML
println("Cr√©ation des features temporelles...")

# Fonction pour cr√©er features de s√©ries temporelles
function cr√©er_features_temporelles(df::DataFrame, station_code::String, target::Symbol, lags::Vector{Int})
    donn√©es_station = filter(row -> row.station_code == station_code, df)
    sort!(donn√©es_station, [:ann√©e, :mois])
    
    if nrow(donn√©es_station) < maximum(lags) + 12
        return DataFrame()  # Pas assez de donn√©es
    end
    
    # Cr√©er une s√©rie temporelle continue
    df_features = copy(donn√©es_station)
    
    # Features de lag (valeurs pass√©es)
    for lag in lags
        nom_feature = Symbol("$(target)_lag_$(lag)")
        df_features[!, nom_feature] = [missing; donn√©es_station[1:end-lag, target]]
    end
    
    # Moyennes mobiles
    for window in [3, 6, 12]
        nom_feature = Symbol("$(target)_ma_$(window)")
        valeurs_ma = []
        
        for i in 1:nrow(donn√©es_station)
            if i >= window
                push!(valeurs_ma, mean(donn√©es_station[i-window+1:i, target]))
            else
                push!(valeurs_ma, missing)
            end
        end
        df_features[!, nom_feature] = valeurs_ma
    end
    
    # Tendance et saisonnalit√©
    df_features.tendance = 1:nrow(df_features)
    df_features.saison_sin = sin.(2œÄ * df_features.mois / 12)
    df_features.saison_cos = cos.(2œÄ * df_features.mois / 12)
    
    # Ann√©e comme feature cyclique  
    df_features.ann√©e_sin = sin.(2œÄ * (df_features.ann√©e .- 1990) / 34)
    df_features.ann√©e_cos = cos.(2œÄ * (df_features.ann√©e .- 1990) / 34)
    
    return df_features
end

# Cr√©er dataset ML pour pr√©diction temp√©rature
lags_temp√©rature = [1, 3, 6, 12]  # 1, 3, 6, 12 mois pr√©c√©dents
dataset_ml_temp = DataFrame()

println("Cr√©ation des features pour mod√©lisation temp√©rature...")

for station_code in stations_codes[1:4]  # 4 stations principales
    features_station = cr√©er_features_temporelles(
        donn√©es_mensuelles, station_code, :temp_mensuelle, lags_temp√©rature
    )
    
    if nrow(features_station) > 0
        dataset_ml_temp = vcat(dataset_ml_temp, features_station)
    end
end

# Nettoyer les donn√©es (supprimer lignes avec missing)
dataset_ml_temp_clean = dropmissing(dataset_ml_temp)

println("‚úÖ Dataset ML temp√©rature : $(nrow(dataset_ml_temp_clean)) observations")

# S√©lection features et target
features_temp = [:temp_mensuelle_lag_1, :temp_mensuelle_lag_3, :temp_mensuelle_lag_6, :temp_mensuelle_lag_12,
                :temp_mensuelle_ma_3, :temp_mensuelle_ma_6, :temp_mensuelle_ma_12,
                :tendance, :saison_sin, :saison_cos, :ann√©e_sin, :ann√©e_cos,
                :pr√©cip_mensuelle, :humidit√©_mensuelle]

# Encoder zone climatique
dataset_ml_temp_clean.zone_climatique_cat = categorical(dataset_ml_temp_clean.zone_climatique)

X_temp = select(dataset_ml_temp_clean, vcat(features_temp, [:zone_climatique_cat]))
y_temp = dataset_ml_temp_clean.temp_mensuelle

# Division temporelle : train jusqu'√† 2020, test 2021-2023
train_mask_temp = dataset_ml_temp_clean.ann√©e .<= 2020
test_mask_temp = dataset_ml_temp_clean.ann√©e .> 2020

X_train_temp, y_train_temp = X_temp[train_mask_temp, :], y_temp[train_mask_temp]
X_test_temp, y_test_temp = X_temp[test_mask_temp, :], y_temp[test_mask_temp]

println("Donn√©es entra√Ænement temp√©rature : $(nrow(X_train_temp))")
println("Donn√©es test temp√©rature : $(nrow(X_test_temp))")

# Mod√®le 1 : Random Forest pour pr√©diction temp√©rature
println("\nüå≤ Mod√®le 1 : Random Forest - Pr√©diction Temp√©rature")

RandomForestRegressor = @load RandomForestRegressor pkg=DecisionTree

rf_temp_model = RandomForestRegressor(n_trees=100, max_depth=15)
rf_temp_machine = machine(rf_temp_model, X_train_temp, y_train_temp)

fit!(rf_temp_machine)

# Pr√©dictions et √©valuation
rf_pred_temp = predict(rf_temp_machine, X_test_temp)

mae_temp = mean(abs.(rf_pred_temp - y_test_temp))
rmse_temp = sqrt(mean((rf_pred_temp - y_test_temp).^2))
r2_temp = 1 - sum((y_test_temp - rf_pred_temp).^2) / sum((y_test_temp .- mean(y_test_temp)).^2)

println("Performance pr√©diction temp√©rature :")
println("  MAE : $(round(mae_temp, digits=3)) ¬∞C")
println("  RMSE : $(round(rmse_temp, digits=3)) ¬∞C")
println("  R¬≤ : $(round(r2_temp, digits=3))")

# Mod√®le 2 : Pr√©diction des pr√©cipitations (plus complexe)
println("\nüåßÔ∏è Mod√®le 2 : Classification S√©cheresse/Pluie Normale")

# Cr√©er variable binaire s√©cheresse (pr√©cip < percentile 20)
seuil_s√©cheresse = quantile(dataset_ml_temp_clean.pr√©cip_mensuelle, 0.2)
dataset_ml_temp_clean.s√©cheresse = dataset_ml_temp_clean.pr√©cip_mensuelle .< seuil_s√©cheresse

# Features pour pr√©diction s√©cheresse  
features_pr√©cip = [:temp_mensuelle, :temp_mensuelle_lag_1, :temp_mensuelle_lag_3,
                  :pr√©cip_mensuelle, :humidit√©_mensuelle, :etp_mensuelle,
                  :saison_sin, :saison_cos, :tendance]

X_pr√©cip = select(dataset_ml_temp_clean, vcat(features_pr√©cip, [:zone_climatique_cat]))
y_pr√©cip = dataset_ml_temp_clean.s√©cheresse

X_train_pr√©cip = X_pr√©cip[train_mask_temp, :]
y_train_pr√©cip = y_pr√©cip[train_mask_temp]
X_test_pr√©cip = X_pr√©cip[test_mask_temp, :]  
y_test_pr√©cip = y_pr√©cip[test_mask_temp]

# Random Forest pour classification
RandomForestClassifier = @load RandomForestClassifier pkg=DecisionTree

rf_pr√©cip_model = RandomForestClassifier(n_trees=100)
rf_pr√©cip_machine = machine(rf_pr√©cip_model, X_train_pr√©cip, y_train_pr√©cip)

fit!(rf_pr√©cip_machine)

# Pr√©dictions s√©cheresse
rf_pred_pr√©cip = predict_mode(rf_pr√©cip_machine, X_test_pr√©cip)
rf_pred_proba = predict(rf_pr√©cip_machine, X_test_pr√©cip)

# √âvaluation classification
accuracy_pr√©cip = mean(rf_pred_pr√©cip .== y_test_pr√©cip)
pr√©cision_s√©cheresse = sum((rf_pred_pr√©cip .== true) .& (y_test_pr√©cip .== true)) / 
                      sum(rf_pred_pr√©cip .== true)

println("Performance pr√©diction s√©cheresse :")
println("  Pr√©cision globale : $(round(accuracy_pr√©cip * 100, digits=1))%")
println("  Pr√©cision s√©cheresse : $(round(pr√©cision_s√©cheresse * 100, digits=1))%")

# Mod√®le 3 : Analyse de clustering zones √† risque
println("\nüó∫Ô∏è Mod√®le 3 : Clustering Zones √† Risque Climatique")

# Calculer indicateurs de risque par station
risques_station = combine(
    groupby(dataset_ml_temp_clean, [:station_code, :station_nom, :zone_climatique]),
    :temp_mensuelle => mean => :temp_moyenne,
    :temp_mensuelle => var => :variabilit√©_temp,
    :pr√©cip_mensuelle => mean => :pr√©cip_moyenne,
    :pr√©cip_mensuelle => var => :variabilit√©_pr√©cip,
    :s√©cheresse => mean => :fr√©quence_s√©cheresse,
    :etp_mensuelle => mean => :stress_hydrique_moyen
)

# Standardisation pour clustering
features_risque = [:temp_moyenne, :variabilit√©_temp, :pr√©cip_moyenne, 
                  :variabilit√©_pr√©cip, :fr√©quence_s√©cheresse, :stress_hydrique_moyen]

Standardizer = @load Standardizer
standardizer_risque = Standardizer()

X_risque = select(risques_station, features_risque)
X_risque_std_machine = machine(standardizer_risque, X_risque)
fit!(X_risque_std_machine)
X_risque_std = MLJ.transform(X_risque_std_machine, X_risque)

# K-means clustering
using Clustering
X_risque_matrix = Matrix(X_risque_std)'

# D√©terminer nombre optimal de clusters (m√©thode coude)
scores_clustering = Float64[]
for k in 2:6
    kmeans_result = kmeans(X_risque_matrix, k, maxiter=100)
    score = kmeans_result.totalcost / size(X_risque_matrix, 2)
    push!(scores_clustering, score)
    println("k=$k : score=$(round(score, digits=3))")
end

k_optimal = argmin(diff(scores_clustering)) + 1  # M√©thode coude
println("Nombre optimal de clusters : $k_optimal")

# Clustering final
kmeans_final_risque = kmeans(X_risque_matrix, k_optimal, maxiter=100)
clusters_risque = assignments(kmeans_final_risque)

risques_station.cluster_risque = clusters_risque

# Interpr√©tation des clusters
println("\nüîç Interpr√©tation des clusters de risque :")
for cluster in 1:k_optimal
    stations_cluster = filter(row -> row.cluster_risque == cluster, risques_station)
    
    temp_moy = mean(stations_cluster.temp_moyenne)
    pr√©cip_moy = mean(stations_cluster.pr√©cip_moyenne)  
    fr√©q_s√©ch = mean(stations_cluster.fr√©quence_s√©cheresse) * 100
    
    println("Cluster $cluster ($(nrow(stations_cluster)) stations) :")
    println("  Temp√©rature : $(round(temp_moy, digits=1))¬∞C")
    println("  Pr√©cipitations : $(round(pr√©cip_moy, digits=0))mm/mois")
    println("  Fr√©quence s√©cheresse : $(round(fr√©q_s√©ch, digits=1))%")
    
    risk_level = fr√©q_s√©ch > 25 ? "√âLEV√â" : (fr√©q_s√©ch > 15 ? "MOD√âR√â" : "FAIBLE")
    println("  Niveau de risque : $risk_level")
    println()
end

println("‚úÖ Mod√©lisation pr√©dictive termin√©e")

# ============================================================================
# PHASE 6 : VISUALISATIONS PR√âDICTIVES ET INTERFACE (30 minutes)
# ============================================================================

println("\nüìä PHASE 6 : VISUALISATIONS PR√âDICTIVES ET INTERFACE")
println("-"^50)

# Visualisation 1 : Pr√©dictions vs R√©alit√© temp√©rature
p_pred_temp = scatter(y_test_temp, rf_pred_temp,
    title="Pr√©dictions vs R√©alit√© - Temp√©rature Mensuelle",
    xlabel="Temp√©rature R√©elle (¬∞C)",
    ylabel="Temp√©rature Pr√©dite (¬∞C)",
    alpha=0.6, size=(700, 600))

# Ligne parfaite
plot!([minimum(y_test_temp), maximum(y_test_temp)],
      [minimum(y_test_temp), maximum(y_test_temp)],
      color=:red, linestyle=:dash, linewidth=2, label="Pr√©diction Parfaite")

display(p_pred_temp)

# Visualisation 2 : S√©rie temporelle avec pr√©dictions
station_exemple = "BF001"  # Ouagadougou
donn√©es_exemple = filter(row -> row.station_code == station_exemple, dataset_ml_temp_clean)
sort!(donn√©es_exemple, [:ann√©e, :mois])

# S√©parer train/test
train_exemple = filter(row -> row.ann√©e <= 2020, donn√©es_exemple)
test_exemple = filter(row -> row.ann√©e > 2020, donn√©es_exemple)

# Pr√©dictions pour cette station
mask_station = dataset_ml_temp_clean.station_code .== station_exemple
pred_exemple = rf_pred_temp[mask_station[test_mask_temp]]

p_s√©rie_temp = plot(title="Pr√©diction Temp√©rature - $(donn√©es_exemple[1, :station_nom])",
                   xlabel="Date", ylabel="Temp√©rature (¬∞C)",
                   size=(900, 500), legend=:topleft)

# Cr√©er dates continues
dates_train = [Date(row.ann√©e, row.mois, 15) for row in eachrow(train_exemple)]
dates_test = [Date(row.ann√©e, row.mois, 15) for row in eachrow(test_exemple)]

plot!(dates_train, train_exemple.temp_mensuelle,
      label="Observations Historiques", color=:blue, linewidth=2)

plot!(dates_test, test_exemple.temp_mensuelle,
      label="Observations R√©centes", color=:green, linewidth=2, marker=:circle)

plot!(dates_test, pred_exemple,
      label="Pr√©dictions Mod√®le", color=:red, linewidth=2, 
      linestyle=:dash, marker=:square)

display(p_s√©rie_temp)

# Visualisation 3 : Clustering zones √† risque
infos_stations = DataFrame(
    station_code = [s.code for s in stations_m√©t√©o],
    latitude = [s.latitude for s in stations_m√©t√©o],
    longitude = [s.longitude for s in stations_m√©t√©o]
)

risques_g√©o = leftjoin(risques_station, infos_stations, on=:station_code)

p_clusters = scatter(risques_g√©o.longitude, risques_g√©o.latitude,
    group=risques_g√©o.cluster_risque,
    markersize=12,
    title="Clustering Zones √† Risque Climatique - Burkina Faso",
    xlabel="Longitude", ylabel="Latitude",
    size=(800, 600))

# Labels stations
for row in eachrow(risques_g√©o)
    annotate!(row.longitude, row.latitude + 0.1,
              text("C$(row.cluster_risque)", 8, :center, :white))
end

display(p_clusters)

# Visualisation 4 : Probabilit√© de s√©cheresse par mois
prob_s√©cheresse_mois = combine(
    groupby(dataset_ml_temp_clean, [:mois, :zone_climatique]),
    :s√©cheresse => mean => :prob_s√©cheresse
)

p_prob_s√©ch = plot(title="Probabilit√© de S√©cheresse par Mois et Zone",
                  xlabel="Mois", ylabel="Probabilit√© de S√©cheresse",
                  legend=:topright, size=(900, 500))

for (i, zone) in enumerate(unique(prob_s√©cheresse_mois.zone_climatique))
    donn√©es_zone = filter(row -> row.zone_climatique == zone, prob_s√©cheresse_mois)
    sort!(donn√©es_zone, :mois)
    
    plot!(donn√©es_zone.mois, donn√©es_zone.prob_s√©cheresse * 100,
          label=zone, color=couleurs[i], linewidth=3, marker=:circle,
          xticks=(1:12, ["J","F","M","A","M","J","J","A","S","O","N","D"]))
end

ylabel!("Probabilit√© (%)")
display(p_prob_s√©ch)

# Interface de pr√©diction climatique
function interface_pr√©diction_climatique()
    println("="^70)
    println("üå°Ô∏è SYST√àME DE PR√âDICTION CLIMATIQUE SAHEL")
    println("="^70)
    println("Mod√®les : Random Forest (R¬≤ temp = $(round(r2_temp, digits=3)))")
    println("Donn√©es : $(length(stations_codes)) stations (1990-2023)")
    println("="^70)
    
    while true
        println("\nüéØ PR√âDICTION CLIMATIQUE")
        println("-"^30)
        
        try
            # Donn√©es utilisateur
            println("Stations disponibles :")
            for (i, station) in enumerate(stations_m√©t√©o[1:6])
                println("  $i. $(station.nom) ($(station.zone_climatique))")
            end
            
            print("Choisir station (1-6) : ")
            station_idx = parse(Int, readline())
            
            if station_idx < 1 || station_idx > 6
                println("‚ùå Station invalide")
                continue
            end
            
            station_choisie = stations_m√©t√©o[station_idx]
            
            print("Mois de pr√©diction (1-12) : ")
            mois_pred = parse(Int, readline())
            
            print("Ann√©e de pr√©diction (2024-2030) : ")
            ann√©e_pred = parse(Int, readline())
            
            print("Temp√©rature mois pr√©c√©dent (¬∞C) : ")
            temp_lag1 = parse(Float64, readline())
            
            print("Pr√©cipitations r√©centes (mm) : ")
            pr√©cip_r√©centes = parse(Float64, readline())
            
            print("Humidit√© moyenne r√©cente (%) : ")
            humidit√©_r√©cente = parse(Float64, readline())
            
            # Cr√©er point de pr√©diction (features simplifi√©es)
            tendance_val = (ann√©e_pred - 1990) * 12 + mois_pred
            saison_sin_val = sin(2œÄ * mois_pred / 12)
            saison_cos_val = cos(2œÄ * mois_pred / 12)
            ann√©e_sin_val = sin(2œÄ * (ann√©e_pred - 1990) / 34)
            ann√©e_cos_val = cos(2œÄ * (ann√©e_pred - 1990) / 34)
            
            # Approximations pour lags manquants
            temp_lag3 = temp_lag1 + randn() * 0.5
            temp_lag6 = temp_lag1 + randn() * 1.0  
            temp_lag12 = temp_lag1 + randn() * 2.0
            
            # Moyennes mobiles approximatives
            temp_ma3 = temp_lag1
            temp_ma6 = temp_lag1
            temp_ma12 = temp_lag1
            
            nouveau_point_temp = DataFrame(
                temp_mensuelle_lag_1 = temp_lag1,
                temp_mensuelle_lag_3 = temp_lag3,
                temp_mensuelle_lag_6 = temp_lag6,
                temp_mensuelle_lag_12 = temp_lag12,
                temp_mensuelle_ma_3 = temp_ma3,
                temp_mensuelle_ma_6 = temp_ma6,
                temp_mensuelle_ma_12 = temp_ma12,
                tendance = tendance_val,
                saison_sin = saison_sin_val,
                saison_cos = saison_cos_val,
                ann√©e_sin = ann√©e_sin_val,
                ann√©e_cos = ann√©e_cos_val,
                pr√©cip_mensuelle = pr√©cip_r√©centes,
                humidit√©_mensuelle = humidit√©_r√©cente,
                zone_climatique_cat = categorical([station_choisie.zone_climatique])
            )
            
            # Pr√©dictions
            temp_pr√©dite = predict(rf_temp_machine, nouveau_point_temp)[1]
            incertitude_temp = rmse_temp
            
            # Calculer probabilit√© de s√©cheresse
            nouveau_point_pr√©cip = DataFrame(
                temp_mensuelle = temp_pr√©dite,
                temp_mensuelle_lag_1 = temp_lag1,
                temp_mensuelle_lag_3 = temp_lag3,
                pr√©cip_mensuelle = pr√©cip_r√©centes,
                humidit√©_mensuelle = humidit√©_r√©cente,
                etp_mensuelle = max(0, (temp_pr√©dite - 5) * 30),  # ETP approximative
                saison_sin = saison_sin_val,
                saison_cos = saison_cos_val,
                tendance = tendance_val,
                zone_climatique_cat = categorical([station_choisie.zone_climatique])
            )
            
            prob_s√©cheresse_pred = predict(rf_pr√©cip_machine, nouveau_point_pr√©cip)[1]
            prob_s√©cheresse_val = pdf(prob_s√©cheresse_pred, true) * 100
            
            # Affichage r√©sultats
            println("\n" * "="^70)
            println("üéØ R√âSULTATS PR√âDICTION CLIMATIQUE")
            println("="^70)
            println("üìç Station : $(station_choisie.nom)")
            println("üìÖ P√©riode : $(mois_pred)/$(ann√©e_pred)")
            println("üå°Ô∏è Zone climatique : $(station_choisie.zone_climatique)")
            println()
            println("üå°Ô∏è TEMP√âRATURE PR√âDITE :")
            println("  Temp√©rature moyenne : $(round(temp_pr√©dite, digits=1)) ¬± $(round(incertitude_temp, digits=1))¬∞C")
            
            # Comparaison historique
            temp_hist_mois = filter(row -> 
                row.station_code == station_choisie.code && row.mois == mois_pred,
                dataset_ml_temp_clean).temp_mensuelle
            
            if !isempty(temp_hist_mois)
                temp_hist_moyenne = mean(temp_hist_mois)
                anomalie = temp_pr√©dite - temp_hist_moyenne
                
                println("  Moyenne historique : $(round(temp_hist_moyenne, digits=1))¬∞C")
                println("  Anomalie : $(round(anomalie, digits=1))¬∞C")
                
                if abs(anomalie) > 2
                    println("  ‚ö†Ô∏è ANOMALIE SIGNIFICATIVE d√©tect√©e !")
                end
            end
            
            println()
            println("üåßÔ∏è RISQUE DE S√âCHERESSE :")
            println("  Probabilit√© : $(round(prob_s√©cheresse_val, digits=1))%")
            
            niveau_risque = prob_s√©cheresse_val > 70 ? "TR√àS √âLEV√â" :
                           prob_s√©cheresse_val > 50 ? "√âLEV√â" :
                           prob_s√©cheresse_val > 30 ? "MOD√âR√â" : "FAIBLE"
            
            println("  Niveau de risque : $niveau_risque")
            
            println()
            println("üí° RECOMMANDATIONS :")
            
            if prob_s√©cheresse_val > 50
                println("  üö® Risque √©lev√© de s√©cheresse :")
                println("    - Pr√©parer syst√®mes d'irrigation")
                println("    - Stocker l'eau de pluie d√®s maintenant")
                println("    - Privil√©gier cultures r√©sistantes (mil, sorgho)")
                println("    - Surveiller r√©serves fourrag√®res")
            end
            
            if anomalie > 2
                println("  üå°Ô∏è Temp√©ratures inhabituellement √©lev√©es :")
                println("    - Prot√©ger le b√©tail de la chaleur")
                println("    - Adapter horaires de travail agricole")
                println("    - Surveiller sant√© des cultures")
            elseif anomalie < -2  
                println("  ‚ùÑÔ∏è Temp√©ratures inhabituellement fra√Æches :")
                println("    - Possibles b√©n√©fices pour certaines cultures")
                println("    - Attention aux maladies fongiques")
            end
            
            if station_choisie.zone_climatique == "Sah√©lienne" && mois_pred in [6, 7, 8]
                println("  üåßÔ∏è Zone sah√©lienne en saison des pluies :")
                println("    - Maximiser capture eau de pluie")
                println("    - Semis opportunistes si pluies pr√©coces")
            end
            
            println("="^70)
            
        catch e
            println("‚ùå Erreur : $e")
        end
        
        print("\nüîÑ Nouvelle pr√©diction ? (oui/non) : ")
        if lowercase(readline()) in ["non", "n"]
            break
        end
    end
    
    println("\nüåç Merci d'utiliser le syst√®me de pr√©diction climatique sah√©lien !")
    println("Pour une adaptation intelligente aux changements climatiques ! üáßüá´")
end

# ============================================================================
# PHASE 7 : BILAN ET PERSPECTIVE CLIMATIQUE (15 minutes)
# ============================================================================

println("\nüéâ PHASE 7 : BILAN DU PROJET D'ANALYSE CLIMATIQUE")
println("="^70)

# Sauvegarde des mod√®les climatiques
println("üíæ Sauvegarde des mod√®les climatiques...")

try
    MLJ.save("modele_temperature_sahel.jlso", rf_temp_machine)
    MLJ.save("modele_secheresse_sahel.jlso", rf_pr√©cip_machine)
    
    # M√©tadonn√©es projet climatique
    metadata_climat = Dict(
        "projet" => "Analyse Climatique Sah√©lienne",
        "date_cr√©ation" => string(today()),
        "stations" => length(stations_codes),
        "p√©riode" => "1990-2023",
        "performance_temp√©rature" => Dict(
            "mae" => mae_temp,
            "rmse" => rmse_temp,
            "r2" => r2_temp
        ),
        "performance_s√©cheresse" => Dict(
            "accuracy" => accuracy_pr√©cip,
            "precision" => pr√©cision_s√©cheresse
        ),
        "√©v√©nements_d√©tect√©s" => nrow(tous_√©v√©nements),
        "clusters_risque" => k_optimal
    )
    
    open("metadata_climat_sahel.json", "w") do f
        JSON3.write(f, metadata_climat)
    end
    
    println("‚úÖ Mod√®les et m√©tadonn√©es sauvegard√©s")
    
catch e
    println("‚ö†Ô∏è Erreur sauvegarde : $e")
end

# Interface utilisateur climatique
println("\nüöÄ Lancement interface pr√©diction climatique...")
println("(Appuyez sur Ctrl+C pour arr√™ter)")

try
    interface_pr√©diction_climatique()
catch InterruptException
    println("\n‚èπÔ∏è Interface ferm√©e")
end

# Bilan final
println("\n" * "="^70)
println("üèÜ PROJET ANALYSE CLIMATIQUE SAHEL - SUCC√àS TOTAL !")
println("="^70)

println("üìä R√âALISATIONS SCIENTIFIQUES :")
println("  ‚úÖ R√©seau $(length(stations_codes)) stations m√©t√©o r√©alistes")
println("  ‚úÖ $(nrow(dataset_climatique)) observations climatiques (34 ans)")
println("  ‚úÖ $(nrow(tous_√©v√©nements)) √©v√©nements extr√™mes d√©tect√©s et analys√©s")
println("  ‚úÖ Mod√®le temp√©rature R¬≤ = $(round(r2_temp, digits=3)) (excellent)")
println("  ‚úÖ Mod√®le s√©cheresse pr√©cision = $(round(accuracy_pr√©cip*100, digits=1))%")
println("  ‚úÖ Clustering $(k_optimal) zones √† risque identifi√©es")
println("  ‚úÖ Interface pr√©diction temps r√©el")

println("\nüåç IMPACT ADAPTATION CLIMATIQUE :")
println("  üå°Ô∏è Pr√©diction temp√©ratures : anticipation vagues de chaleur")
println("  üåßÔ∏è Alerte s√©cheresse : pr√©paration agriculteurs et √©leveurs")
println("  üó∫Ô∏è Cartographie risques : planification territoriale")
println("  üìà Tendances long terme : politiques d'adaptation")
println("  üö® Syst√®me d'alerte pr√©coce : r√©duction vuln√©rabilit√©s")
println("  üåæ Support agriculture : calendriers culturaux optimis√©s")

println("\nüî¨ INNOVATIONS TECHNIQUES :")
println("  üìä S√©ries temporelles climatiques avec ML de pointe")
println("  ü§ñ Ensemble de mod√®les pour robustesse pr√©dictive")
println("  üéØ D√©tection automatique √©v√©nements extr√™mes") 
println("  üåê Clustering g√©o-climatique pour zonage")
println("  üì± Interface utilisateur praticiens terrain")
println("  üíæ Architecture d√©ployable en production")

println("\nüáßüá´ APPLICATIONS BURKINA FASO :")
println("  üèõÔ∏è Support politique nationale adaptation")
println("  üåæ Services climatiques pour agriculture")
println("  üíß Gestion ressources en eau optimis√©e")
println("  üèòÔ∏è Planification urbaine climat-r√©siliente")
println("  üì∫ Communication publique risques climatiques")
println("  üéì Formation m√©t√©orologues et agronomes")

println("\nüöÄ EXTENSIONS STRAT√âGIQUES :")
println("  üõ∞Ô∏è Int√©gration donn√©es satellites temps r√©el")
println("  üåê Extension r√©gionale (Mali, Niger, Tchad)")
println("  ü§ñ Deep learning pour pr√©dictions ultra-fines")
println("  üì± Applications mobiles grand public")
println("  üè¢ APIs pour secteur priv√© (assurances, agribusiness)")
println("  üéØ Mod√®les sectoriels (sant√©, √©nergie, tourisme)")

println("\nüéñÔ∏è EXPERTISE UNIQUE D√âVELOPP√âE :")
println("Ce projet √©tablit votre expertise **Climatologie + IA + Sahel** :")
println("  - Mod√©lisation climatique avanc√©e avec Julia")
println("  - Expertise g√©o-climatique sah√©lienne")
println("  - Syst√®mes d'alerte pr√©coce pour adaptation")
println("  - Interface science-politique-terrain")

println("\nüíé RECONNAISSANCE INTERNATIONALE :")
println("Cette comp√©tence vous positionne pour :")
println("  üåç **Organisations internationales** : GIEC, OMM, PNUD")
println("  üî¨ **Centres recherche** : ICRISAT, IRD, CIRAD")
println("  üè¢ **Secteur priv√©** : Assurances, √©nergie renouvelable")
println("  üéì **Universit√©s** : Programmes climatologie tropicale")
println("  üèõÔ∏è **Gouvernements** : Services m√©t√©orologiques nationaux")

println("\nüåü IMPACT TRANSFORMATIONNEL :")
println("Votre syst√®me peut sauver des vies et des moyens de subsistance")
println("en permettant aux populations sah√©liennes de mieux s'adapter")
println("aux changements climatiques !")

println("\n" * "="^70)
println("üéØ MISSION R√âUSSIE : LE SAHEL S'ADAPTE GR√ÇCE √Ä VOS MOD√àLES IA ! üåç‚ú®")
println("="^70)