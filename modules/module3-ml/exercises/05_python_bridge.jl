# Exercice 5 : Bridge Python-Julia
# Module 3 : Apprentissage Automatique avec Julia
# Dur√©e : 45 minutes

# üìö AVANT DE COMMENCER
# Lisez le r√©sum√© d'apprentissage : resume_05_python_bridge.md
# D√©couvrez comment combiner le meilleur des √©cosyst√®mes Python et Julia !

println("üìö Consultez le r√©sum√© : modules/module3-ml/resume_05_python_bridge.md")
println("Appuyez sur Entr√©e quand vous √™tes pr√™t √† unir Python et Julia...")
readline()

println("üêçüîó Bridge Python-Julia : Le Meilleur des Deux Mondes")
println("="^70)

# TODO 1 : Configuration environnement Python-Julia (10 minutes)
# Configurez PyCall et testez la connectivit√© avec Python

# TODO : Importez les paquets Julia n√©cessaires
using PyCall  # Compl√©tez avec les autres paquets

# TODO : Importez DataFrames, Statistics, Random


println("‚úÖ Paquets Julia import√©s")

# TODO : V√©rifiez la configuration Python
println("Configuration Python-Julia :")
println("Python : $(PyCall.python)")
# TODO : Affichez la version Python avec PyCall.pyversion

# TODO 2 : Premier test - Fonctions Python simples (10 minutes)
println("\nüß™ Test 1 : Appel de fonctions Python depuis Julia")

# TODO : D√©finissez une fonction Python avec py""" ... """
# Cr√©ez une fonction qui calcule des statistiques pour donn√©es burkinab√®

py"""
def calculer_statistiques_bf(donn√©es):
    # TODO : Importez numpy dans la fonction Python
    
    # TODO : Calculez moyenne, m√©diane, √©cart-type
    moyenne = # TODO
    m√©diane = # TODO
    √©cart_type = # TODO
    
    return {
        'moyenne': moyenne,
        'm√©diane': m√©diane,
        '√©cart_type': √©cart_type,
        'n_observations': len(donn√©es)
    }

def convertir_fcfa_euro(montant_fcfa, taux=656):
    # TODO : Impl√©mentez la conversion FCFA ‚Üí Euro
    return # TODO
"""

# TODO : Testez vos fonctions Python
# Donn√©es d'exemple : PIB par habitant FCFA des r√©gions BF
pib_regions_fcfa = [450000, 380000, 850000, 320000, 290000,
    410000, 360000, 310000, 520000, 270000,
    480000, 250000, 420000]

# TODO : Appelez la fonction Python depuis Julia
stats_pib = # TODO : py"calculer_statistiques_bf"(pib_regions_fcfa)
    println("Statistiques PIB Burkina Faso :")
# TODO : Affichez les r√©sultats (moyenne, m√©diane, etc.)

# TODO : Convertissez quelques valeurs en Euro
pib_ouaga_euro = # TODO : py"convertir_fcfa_euro"(850000)
    println("PIB Ouagadougou en Euro : $(round(pib_ouaga_euro, digits=0)) ‚Ç¨")

println("‚úÖ Test 1 r√©ussi ! Python et Julia communiquent !")

# TODO 3 : √âchange de donn√©es - DataFrames ‚Üî Pandas (15 minutes)  
println("\nüìä Test 2 : √âchange DataFrames Julia ‚Üî Pandas")

# TODO : Cr√©ez un DataFrame Julia avec donn√©es agricoles BF
donn√©es_agri_bf = DataFrame(
    r√©gion=[
    # TODO : Listez quelques r√©gions du BF
    ],
    culture=[
    # TODO : Cultures correspondantes
    ],
    superficie_ha=[
    # TODO : Superficies r√©alistes (500-5000 ha)
    ],
    rendement_tha=[
    # TODO : Rendements r√©alistes (0.5-2.0 t/ha)
    ],
    prix_fcfa_kg=[
    # TODO : Prix r√©alistes (150-400 FCFA/kg)
    ]
)

# TODO : Calculez production totale et revenus
donn√©es_agri_bf.production_totale = # TODO : superficie √ó rendement
    donn√©es_agri_bf.revenus_fcfa = # TODO : production √ó prix
        println("DataFrame Julia cr√©√© : $(nrow(donn√©es_agri_bf)) observations")

# TODO 4 : Utilisation de Pandas depuis Julia (D√©fi)
println("\nüêç D√©fi : Utilisation de Pandas depuis Julia")

# Tentative d'import pandas (peut √©chouer selon installation)
try
    pandas = pyimport("pandas")
    println("‚úÖ Pandas disponible !")

    # TODO : Convertissez DataFrame Julia ‚Üí Pandas
    # Astuce : Cr√©ez un dictionnaire puis pandas.DataFrame
    dict_donn√©es = Dict()
    for col in names(donn√©es_agri_bf)
        # TODO : Remplissez le dictionnaire
        dict_donn√©es[col] = "#TODO"
    end

    df_pandas = # TODO : pandas.DataFrame(dict_donn√©es)
        println("Conversion Julia ‚Üí Pandas r√©ussie !")
    println("Shape Pandas : $(df_pandas.shape)")

    # TODO : Op√©ration Pandas - groupby par r√©gion
    stats_pandas = ""
    # TODO : df_pandas.groupby("r√©gion").agg({"rendement_tha": "mean", "revenus_fcfa": "sum"})

    println("Statistiques par r√©gion (Pandas) :")
    println(stats_pandas)
catch e
    println("‚ö†Ô∏è Pandas non disponible : $e")
    println("Continuons avec les fonctionnalit√©s de base...")
end

# TODO 5 : Scikit-learn depuis Julia (D√©fi Expert)
println("\nü§ñ D√©fi Expert : Scikit-learn depuis Julia")

try
    # TODO : Importez scikit-learn
    sklearn_ensemble = # TODO : pyimport("sklearn.ensemble")
        sklearn_metrics = # TODO : pyimport("sklearn.metrics")
            println("‚úÖ Scikit-learn disponible !")

    # TODO : Pr√©parez donn√©es pour ML
    # Features : superficie, prix
    X = # TODO : Matrice [superficie, prix] 
        y = # TODO : Vecteur rendements

        # TODO : Cr√©ez et entra√Ænez Random Forest avec scikit-learn
            rf_sklearn = # TODO : sklearn_ensemble.RandomForestRegressor(n_estimators=10, random_state=42)

            # TODO : Entra√Ænement
            # TODO : rf_sklearn.fit(X, y)

            # TODO : Pr√©dictions
                y_pred = # TODO : rf_sklearn.predict(X)

                # TODO : M√©triques
                    mae_sklearn = # TODO : sklearn_metrics.mean_absolute_error(y, y_pred)
                        println("Random Forest scikit-learn :")
    println("  MAE : $(round(mae_sklearn, digits=3)) t/ha")

    # TODO : Pr√©diction pour nouveau sc√©nario
    nouveau_sc√©nario = # TODO : [2000, 200] (2000 ha, 200 FCFA/kg)
        prediction_nouvelle = # TODO : rf_sklearn.predict([nouveau_sc√©nario])
            println("Pr√©diction nouveau sc√©nario : $(round(prediction_nouvelle[1], digits=2)) t/ha")

catch e
    println("‚ö†Ô∏è Scikit-learn non disponible : $e")
    println("C'est normal, continuons l'apprentissage...")
end

# TODO 6 : Comparaison performance Julia vs Python (10 minutes)
println("\n‚ö° Test 3 : Comparaison Performance Julia vs Python")

# TODO : Fonction de calcul intensif en Julia
function calcul_intensif_julia(n::Int)
    total = 0.0
    for i in 1:n
        # TODO : Op√©ration math√©matique complexe
        total += "# TODO : sqrt(i) * sin(i) ou √©quivalent"
    end
    return total
end

# TODO : M√™me fonction en Python
py"""
import math

def calcul_intensif_python(n):
    total = 0.0
    # TODO : Impl√©mentez la m√™me boucle en Python
    for i in range(1, n+1):
        # TODO : M√™me op√©ration qu'en Julia
        total += # TODO
    return total
"""

# TODO : Benchmark des deux versions
n_test = 50000  # Ajustez selon performance de votre machine

println("Test de performance (n = $n_test) :")

# TODO : Mesurez temps Julia avec @elapsed
temps_julia = # TODO : @elapsed r√©sultat_julia = calcul_intensif_julia(n_test)

# TODO : Mesurez temps Python
    temps_python = # TODO : @elapsed r√©sultat_python = py"calcul_intensif_python"(n_test)
        println("  Julia : $(round(temps_julia * 1000, digits=1)) ms")
println("  Python : $(round(temps_python * 1000, digits=1)) ms")

# TODO : Calculez le speedup
speedup = # TODO : temps_python / temps_julia
    println("  Speedup Julia : $(round(speedup, digits=1))x plus rapide")

# V√©rification r√©sultats identiques
println("  Diff√©rence r√©sultats : $(abs(r√©sultat_julia - r√©sultat_python))")

# TODO 7 : Recommandations et bonnes pratiques (5 minutes)
println("\nüí° Recommandations Python-Julia")

println("""
üîó STRAT√âGIES D'INT√âGRATION OPTIMALES :

‚úÖ UTILISEZ PYTHON QUAND :
  ‚Ä¢ Biblioth√®ques sp√©cialis√©es non disponibles en Julia
  ‚Ä¢ √âquipe d√©j√† experte en Python
  ‚Ä¢ Prototypage rapide d'id√©es
  ‚Ä¢ Interface avec syst√®mes Python existants

‚úÖ UTILISEZ JULIA QUAND :
  ‚Ä¢ Performance critique requise  
  ‚Ä¢ Calculs scientifiques avanc√©s
  ‚Ä¢ Nouvelle architecture (exploiter multiple dispatch)
  ‚Ä¢ Manipulation de types complexes

üéØ APPROCHE HYBRIDE RECOMMAND√âE :
  1. Prototypage avec Python (familiarit√©)
  2. Production avec Julia (performance)  
  3. Visualisation : garder outils Python si n√©cessaire
  4. Interface Julia pour utilisateurs finaux
""")

println("\nüí° APPLICATIONS BURKINA FASO :")
println("""
üåæ AGRICULTURE :
  ‚Ä¢ Prototypage mod√®les avec scikit-learn
  ‚Ä¢ Production avec MLJ.jl (vitesse)
  ‚Ä¢ Visualisation Matplotlib + Plots.jl

üå°Ô∏è CLIMAT :
  ‚Ä¢ Traitement donn√©es avec Pandas (familiarit√© √©quipes)
  ‚Ä¢ Calculs Julia pour performance
  ‚Ä¢ Dashboards avec Julia Genie.jl

üìä √âCONOMIE :
  ‚Ä¢ Excel/CSV ‚Üí Pandas ‚Üí DataFrames.jl
  ‚Ä¢ Calculs √©conomiques en Julia (pr√©cision)
  ‚Ä¢ Rapports avec Python (√©cosyst√®me mature)
""")

# TODO 8 : Cr√©ez votre propre fonction hybride ! (Bonus)
println("\nüöÄ D√©fi Final : Votre Fonction Hybride !")

# TODO : Cr√©ez une fonction qui utilise Python pour preprocessing
# et Julia pour le calcul final

# Exemple d'id√©e :
# - Python : nettoie et formate les donn√©es
# - Julia : calcul statistique ou ML rapide
# - Retour r√©sultat format√©

# TODO : Impl√©mentez votre id√©e cr√©ative !

# Bilan d'apprentissage
println("\nüìà BILAN D'APPRENTISSAGE")
println("="^70)
println("üêçüîó F√âLICITATIONS ! MA√éTRISE DE L'INT√âGRATION PYTHON-JULIA !")
println("="^70)
println("‚úÖ Comp√©tences d'architecte multi-√©cosyst√®me :")
println("  üîß Configuration et utilisation de PyCall.jl")
println("  üêç Ex√©cution de code Python depuis Julia")
println("  üìä √âchange de donn√©es entre √©cosyst√®mes")
println("  ü§ñ Utilisation de scikit-learn depuis Julia")
println("  ‚ö° Optimisation performance avec choix technologique")
println("  üáßüá´ Applications pratiques contexte burkinab√®")

println("\nüåü BADGE D√âBLOQU√â : 'Architecte Multi-√âcosyst√®me BF'")
println("Vous ma√Ætrisez l'art de combiner le meilleur des")
println("√©cosyst√®mes Python et Julia !")

println("\nüéØ COMP√âTENCES UNIQUES ACQUISES :")
println("  - Int√©gration syst√®mes ML existants (Python) avec performance Julia")
println("  - Migration progressive Python ‚Üí Julia pour organisations")
println("  - D√©veloppement APIs hybrides haute performance")
println("  - Conseil technologique √©clair√© par exp√©rience pratique")

println("\nüöÄ PR√äT POUR LES PROJETS FINAUX !")
println("üìÜ PROCHAINES √âTAPES : Projets agricole et climatique")
println("   (Combinez tout : MLJ, visualisation, et int√©gration Python)")
println("   (Conseil : Choisissez la technologie optimale pour chaque t√¢che !)")

# NOTES POUR L'INSTRUCTEUR :
# Cet exercice couvre :
# 1. Configuration PyCall.jl
# 2. Appel de fonctions Python depuis Julia
# 3. √âchange de donn√©es DataFrames ‚Üî Pandas
# 4. Utilisation scikit-learn depuis Julia
# 5. Comparaison performance Julia vs Python
# 6. Bonnes pratiques d'int√©gration
# 7. Applications contextualis√©es BF

# Points d'attention :
# - PyCall peut n√©cessiter configuration selon installation
# - Pandas/scikit-learn peuvent ne pas √™tre disponibles
# - Gestion gracieuse des √©checs d'import
# - Focus sur concepts m√™me si packages manquants