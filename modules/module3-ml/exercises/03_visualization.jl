# Exercice 3 : Visualisation Scientifique avec Julia
# Module 3 : Apprentissage Automatique avec Julia
# Dur√©e : 45 minutes

# üìö AVANT DE COMMENCER
# Lisez le r√©sum√© d'apprentissage : resume_03_visualization.md
# D√©couvrez comment cr√©er des visualisations percutantes avec Plots.jl !

println("üìö Consultez le r√©sum√© : modules/module3-ml/resume_03_visualization.md")
println("Appuyez sur Entr√©e quand vous √™tes pr√™t √† cr√©er des graphiques comme un pro...")
readline()

println("üìà Visualisation Scientifique : Donn√©es du Burkina Faso")
println("="^65)

# TODO 1 : Installation et configuration (5 minutes)
# Importez les paquets n√©cessaires et configurez l'environnement graphique

# TODO : Importez Plots, StatsPlots, PlotlyJS
using Plots  # Compl√©tez cette ligne avec les autres paquets

# TODO : Importez DataFrames, CSV, Statistics, Dates


# TODO : Importez Colors, ColorSchemes et Random


# TODO : Fixez le seed al√©atoire √† 42


# TODO : Configurez PlotlyJS comme backend et utilisez le th√®me :bright


println("üé® Configuration graphique : Backend PlotlyJS activ√©")
println("Th√®me : Bright (optimis√© pour pr√©sentations)")

# Partie 1 : Donn√©es Climatiques Burkinab√®
println("\nüå°Ô∏è Partie 1 : Visualisation Climatique du Burkina Faso")

# TODO 2 : Cr√©ation des donn√©es climatiques (10 minutes)
# Cr√©ez un dataset r√©aliste pour les 13 r√©gions du Burkina Faso

# TODO : D√©finissez la liste des 13 r√©gions du Burkina Faso
r√©gions_bf = [
    "Boucle du Mouhoun", "Cascades", "Centre", "Centre-Est", "Centre-Nord",
    "Centre-Ouest", "Centre-Sud", "Est", "Hauts-Bassins", "Nord",
    "Plateau-Central", "Sahel", "Sud-Ouest"
]

# TODO : Cr√©ez un DataFrame avec des donn√©es climatiques r√©alistes
# Astuce : Utilisez repeat() pour les r√©gions et les mois
# Cr√©ez des patterns de temp√©rature coh√©rents avec les zones climatiques :
# - Sahel : plus chaud (35-42¬∞C)
# - Centre : mod√©r√© (28-37¬∞C) 
# - Sud : plus frais (26-35¬∞C)

donn√©es_climat = DataFrame(
    # TODO : Compl√©tez la cr√©ation du DataFrame
    r√©gion=repeat(r√©gions_bf, 12),
    mois=111,
    # TODO : r√©p√©ter 1:12 pour chaque r√©gion
    # TODO : Ajoutez une colonne temp√©rature avec des valeurs r√©alistes
    # TODO : Ajoutez une colonne pr√©cipitations (pattern sah√©lien juin-sept)
)

# TODO : Ajoutez les noms de mois en fran√ßais
noms_mois = ["Jan", "F√©v", "Mar", "Avr", "Mai", "Jun",
    "Jul", "Ao√ª", "Sep", "Oct", "Nov", "D√©c"]
# TODO : Ajoutez une colonne mois_nom au DataFrame

println("Donn√©es climatiques g√©n√©r√©es pour $(length(r√©gions_bf)) r√©gions")

# TODO 3 : Premier graphique - Temp√©ratures par r√©gion (10 minutes)
println("\nüìä Graphique 1 : Temp√©ratures Moyennes par R√©gion")

# TODO : Calculez les temp√©ratures moyennes par r√©gion avec combine() et groupby()
# temp_moyennes = 

# TODO : Triez par temp√©rature d√©croissante avec sort!()


# TODO : Cr√©ez un graphique en barres (bar plot)
# Param√®tres sugg√©r√©s : title, xlabel, ylabel, color=:thermal, rotation=45
# p1 = 

# TODO : Ajoutez une ligne horizontale pour la moyenne nationale
# Astuce : utilisez hline!() et mean()


# TODO : Affichez le graphique avec display()


println("‚úÖ D√©fi 1 compl√©t√© ! Passons aux pr√©cipitations...")

# TODO 4 : Cycle saisonnier des pr√©cipitations (10 minutes)
println("\nüåßÔ∏è Graphique 2 : Cycle Saisonnier des Pr√©cipitations")

# TODO : Calculez les pr√©cipitations moyennes par mois
# precip_mensuelles = 

# TODO : Cr√©ez un graphique lin√©aire (plot)
# Montrez l'√©volution des pr√©cipitations au cours de l'ann√©e
# p2 = 

# BONUS : Ajoutez une zone color√©e pour la saison des pluies (mois 5-10)
# Astuce : utilisez vspan!()


# TODO : Affichez le graphique


println("‚úÖ D√©fi 2 compl√©t√© ! Cr√©ons des visualisations avanc√©es...")

# TODO 5 : Visualisation g√©ographique (10 minutes)
println("\nüó∫Ô∏è Graphique 3 : Carte Climatique du Burkina Faso")

# Coordonn√©es approximatives des r√©gions (fournies)
coords_r√©gions = DataFrame(
    r√©gion=r√©gions_bf,
    latitude=[12.3, 10.8, 12.4, 11.9, 13.3, 12.1, 11.2, 12.0, 11.2, 13.5, 12.3, 14.0, 10.3],
    longitude=[-2.9, -4.3, -1.5, -0.3, -1.5, -2.3, -1.0, 0.5, -4.3, -2.3, -1.2, -0.2, -3.2]
)

# TODO : Fusionnez les coordonn√©es avec vos donn√©es climatiques
# Astuce : utilisez leftjoin() avec temp_moyennes


# TODO : Cr√©ez un scatter plot o√π :
# - x = longitude, y = latitude
# - couleur = temp√©rature moyenne (zcolor)
# - taille = proportionnelle aux pr√©cipitations
# p3 = 

# TODO : Ajoutez des labels pour les r√©gions avec annotate!()


# TODO : Affichez le graphique


println("‚úÖ D√©fi 3 compl√©t√© ! Finale avanc√©e...")

# TODO 6 : D√©fi cr√©atif - Dashboard multi-graphiques (Bonus)
println("\nüìä D√©fi Final : Dashboard Burkina Faso")

# TODO : Cr√©ez un layout combin√© avec plot() et layout=(2,2)
# Combinez vos 3 graphiques pr√©c√©dents + un 4√®me de votre choix
# Exemples : histogramme, boxplot, heatmap...

# dashboard = plot(p1, p2, p3, p4, layout=(2,2), 
#                 plot_title="üáßüá´ Dashboard Climatique Burkina Faso")

# TODO : Affichez votre dashboard


# TODO 7 : Export et sauvegarde (Bonus)
# TODO : Sauvegardez vos graphiques avec savefig()
# Exemple : savefig(p1, "temperatures_bf.png")

# Bilan d'apprentissage
println("\nüìà BILAN D'APPRENTISSAGE")
println("="^65)
println("üìä F√âLICITATIONS ! VOUS MA√éTRISEZ LA VISUALISATION JULIA !")
println("="^65)
println("‚úÖ Comp√©tences acquises :")
println("  üé® Configuration Plots.jl avec backends interactifs")
println("  üìä Graphiques statistiques (bar, line, scatter)")
println("  üó∫Ô∏è Visualisations g√©ographiques avec coordonn√©es")
println("  üéØ Personnalisation avanc√©e (couleurs, labels, layouts)")
println("  üíæ Export professionnel pour publications")
println("  üáßüá´ Application donn√©es burkinab√® authentiques")

println("\nüåü BADGE D√âBLOQU√â : 'Visualiseur de Donn√©es Burkina Faso'")
println("Vos graphiques racontent maintenant l'histoire du climat sah√©lien !")

println("\nüöÄ PROCHAINE √âTAPE : 04_advanced_ml.jl")
println("   (Vos visualisations valideront les mod√®les ML !)")

# TODO BONUS : Explorez d'autres types de graphiques !
# - Histogrammes avec histogram()
# - Bo√Ætes √† moustaches avec boxplot()  
# - Matrices de corr√©lation avec heatmap()
# - Animations avec @animate
# - Graphiques 3D avec surface() ou scatter3d()

# Graphique 2 : Cycle saisonnier des pr√©cipitations  
println("\nüåßÔ∏è Graphique 2 : Cycle Saisonnier des Pr√©cipitations")

precip_mensuelles = combine(groupby(donn√©es_climat, :mois),
    :pr√©cipitations => mean => :precip_moyenne)
sort!(precip_mensuelles, :mois)

p2 = plot(precip_mensuelles.mois, precip_mensuelles.precip_moyenne,
    title="üåßÔ∏è Cycle des Pr√©cipitations - Burkina Faso",
    xlabel="Mois",
    ylabel="Pr√©cipitations (mm)",
    color=:blue,
    linewidth=3,
    marker=:circle,
    markersize=6,
    legend=false,
    xticks=(1:12, noms_mois),
    size=(800, 400))

# Zone de saison des pluies
vspan!([5, 10], alpha=0.2, color=:blue, label="Saison des pluies")

display(p2)

# Partie 2 : Donn√©es Agricoles
println("\nüåæ Partie 2 : Visualisation des Rendements Agricoles")

# Donn√©es de production agricole (tonnes/hectare)
cultures_bf = ["Mil", "Sorgho", "Ma√Øs", "Riz", "Ni√©b√©", "Arachide", "Coton", "S√©same"]
ann√©es = 2018:2023

production_agri = DataFrame()
for culture in cultures_bf, ann√©e in ann√©es
    # Rendements bas√©s sur donn√©es FAO approximatives pour le BF
    rendement_base = Dict(
        "Mil" => 0.8, "Sorgho" => 0.9, "Ma√Øs" => 1.2, "Riz" => 2.1,
        "Ni√©b√©" => 0.6, "Arachide" => 1.1, "Coton" => 1.3, "S√©same" => 0.4
    )[culture]

    # Variation climatique r√©aliste
    variation = 1.0 + (rand() - 0.5) * 0.4  # ¬±20% variation

    push!(production_agri, (
        culture=culture,
        ann√©e=ann√©e,
        rendement=rendement_base * variation,
        superficie=rand(50000:500000)  # hectares
    ))
end

production_agri.production_totale = production_agri.rendement .* production_agri.superficie

# Graphique 3 : √âvolution des rendements par culture
println("\nüìà Graphique 3 : √âvolution des Rendements Agricoles")

p3 = plot(title="üåæ √âvolution des Rendements - Burkina Faso (2018-2023)",
    xlabel="Ann√©e",
    ylabel="Rendement (tonnes/hectare)",
    legend=:outertopright,
    size=(900, 500))

couleurs = palette(:tab10)
for (i, culture) in enumerate(cultures_bf)
    donn√©es_culture = filter(row -> row.culture == culture, production_agri)
    plot!(donn√©es_culture.ann√©e, donn√©es_culture.rendement,
        label=culture,
        color=couleurs[i],
        linewidth=2,
        marker=:circle,
        markersize=4)
end

display(p3)

# Graphique 4 : Comparaison production par culture (derni√®re ann√©e)
println("\nüìä Graphique 4 : Production par Culture (2023)")

prod_2023 = filter(row -> row.ann√©e == 2023, production_agri)
sort!(prod_2023, :production_totale, rev=true)

p4 = bar(prod_2023.culture, prod_2023.production_totale / 1000,  # en milliers de tonnes
    title="üåæ Production Totale par Culture - 2023",
    xlabel="Culture",
    ylabel="Production (milliers de tonnes)",
    color=:viridis,
    legend=false,
    rotation=45,
    size=(800, 500))

# Annotations sur les barres
for (i, row) in enumerate(eachrow(prod_2023))
    annotate!(i, row.production_totale / 1000 + 50,
        text("$(round(row.production_totale/1000, digits=0))k", 8, :center))
end

display(p4)

# Partie 3 : Donn√©es D√©mographiques et √âconomiques
println("\nüë• Partie 3 : D√©mographie et √âconomie")

# Donn√©es d√©mographiques par r√©gion (approximatives)
demo_data = DataFrame(
    r√©gion=r√©gions_bf,
    population=[
        1898166, 734993, 2453496, 1578075, 1529977,  # Boucle, Cascades, Centre, Centre-Est, Centre-Nord
        1369509, 796085, 1661673, 2201027, 1481553,  # Centre-Ouest, Centre-Sud, Est, Hauts-Bassins, Nord
        808224, 1235563, 878759                       # Plateau-Central, Sahel, Sud-Ouest
    ],
    pib_par_habitant=[
        450, 380, 850, 320, 290,     # FCFA (milliers)
        410, 360, 310, 520, 270,
        480, 250, 420
    ],
    taux_alphabetisation=[
        35.2, 28.5, 68.9, 22.1, 18.7,  # %
        31.4, 26.8, 19.3, 42.5, 16.2,
        38.9, 14.3, 33.7
    ]
)

# Graphique 5 : Relation Population vs PIB par habitant
println("\nüí∞ Graphique 5 : Population vs D√©veloppement √âconomique")

p5 = scatter(demo_data.population / 1000, demo_data.pib_par_habitant,
    title="üë• Population vs PIB par Habitant - R√©gions BF",
    xlabel="Population (milliers)",
    ylabel="PIB par habitant (milliers FCFA)",
    color=:red,
    markersize=8,
    alpha=0.7,
    size=(800, 500))

# Ajouter labels des r√©gions
for row in eachrow(demo_data)
    annotate!(row.population / 1000, row.pib_par_habitant + 20,
        text(row.r√©gion, 8, :center))
end

# Ligne de tendance
using GLM
model = lm(@formula(pib_par_habitant ~ population), demo_data)
x_trend = range(minimum(demo_data.population), maximum(demo_data.population), length=100)
y_trend = predict(model, DataFrame(population=x_trend))
plot!(x_trend / 1000, y_trend, color=:blue, linewidth=2, linestyle=:dash,
    label="Tendance", legend=:topright)

display(p5)

# Partie 4 : Carte Th√©matique du Burkina Faso
println("\nüó∫Ô∏è Partie 4 : Visualisation G√©ographique")

# Coordonn√©es approximatives des chefs-lieux de r√©gions
coords_r√©gions = DataFrame(
    r√©gion=r√©gions_bf,
    latitude=[12.3, 10.8, 12.4, 11.9, 13.3, 12.1, 11.2, 12.0, 11.2, 13.5, 12.3, 14.0, 10.3],
    longitude=[-2.9, -4.3, -1.5, -0.3, -1.5, -2.3, -1.0, 0.5, -4.3, -2.3, -1.2, -0.2, -3.2]
)

# Fusionner avec les donn√©es √©conomiques
coords_√©co = leftjoin(coords_r√©gions, demo_data, on=:r√©gion)

p6 = scatter(coords_√©co.longitude, coords_√©co.latitude,
    title="üó∫Ô∏è D√©veloppement √âconomique par R√©gion - Burkina Faso",
    xlabel="Longitude",
    ylabel="Latitude",
    zcolor=coords_√©co.pib_par_habitant,
    markersize=sqrt.(coords_√©co.population / 50000),  # Taille proportionnelle √† population
    colorbar_title="PIB/hab (k FCFA)",
    size=(900, 600),
    aspect_ratio=1)

# Ajouter contour approximatif du Burkina Faso
burkina_contour_lon = [-5.5, -5.5, 2.4, 2.4, -5.5]
burkina_contour_lat = [9.4, 15.1, 15.1, 9.4, 9.4]
plot!(burkina_contour_lon, burkina_contour_lat,
    color=:black, linewidth=2, linestyle=:solid, label="Fronti√®res BF")

display(p6)

# Partie 5 : Dashboard Interactif
println("\nüìä Partie 5 : Dashboard Multi-Graphiques")

# Cr√©er un layout combin√©
println("Cr√©ation d'un dashboard complet...")

# Mini-graphiques pour le dashboard
p_temp_mini = plot(1:12,
    [mean(filter(row -> row.mois == m, donn√©es_climat).temp√©rature) for m in 1:12],
    title="Temp√©rature", color=:red, legend=false, size=(300, 200))

p_precip_mini = plot(1:12,
    [mean(filter(row -> row.mois == m, donn√©es_climat).pr√©cipitations) for m in 1:12],
    title="Pr√©cipitations", color=:blue, legend=false, size=(300, 200))

p_pop_mini = bar(demo_data.r√©gion[1:5], demo_data.population[1:5] / 1000,
    title="Top 5 R√©gions", legend=false, size=(300, 200), rotation=45)

p_agri_mini = plot(ann√©es, [mean(filter(row -> row.ann√©e == a, production_agri).rendement) for a in ann√©es],
    title="Rendement Moyen", color=:green, legend=false, size=(300, 200))

# Combiner en dashboard
dashboard = plot(p_temp_mini, p_precip_mini, p_pop_mini, p_agri_mini,
    layout=(2, 2),
    plot_title="üáßüá´ Dashboard Burkina Faso - Indicateurs Cl√©s",
    size=(900, 600))

display(dashboard)

# Partie 6 : Visualisations Avanc√©es et Interactives
println("\nüé® Partie 6 : Visualisations Avanc√©es")

# Heatmap des corr√©lations
println("Cr√©ation d'une heatmap de corr√©lations...")

# Matrice de corr√©lation entre variables
variables_num√©riques = [:temp√©rature, :pr√©cipitations, :population, :pib_par_habitant, :taux_alphabetisation]

# Pr√©parer donn√©es pour corr√©lation
donn√©es_corr = DataFrame()
for r√©gion in r√©gions_bf
    donn√©es_r√©gion = filter(row -> row.r√©gion == r√©gion, donn√©es_climat)
    demo_r√©gion = filter(row -> row.r√©gion == r√©gion, demo_data)[1, :]

    push!(donn√©es_corr, (
        r√©gion=r√©gion,
        temp_moyenne=mean(donn√©es_r√©gion.temp√©rature),
        precip_totale=sum(donn√©es_r√©gion.pr√©cipitations),
        population=demo_r√©gion.population,
        pib_par_habitant=demo_r√©gion.pib_par_habitant,
        alphabetisation=demo_r√©gion.taux_alphabetisation
    ))
end

# Calculer matrice de corr√©lation
using Statistics
vars = [:temp_moyenne, :precip_totale, :population, :pib_par_habitant, :alphabetisation]
n_vars = length(vars)
cor_matrix = zeros(n_vars, n_vars)

for i in 1:n_vars, j in 1:n_vars
    cor_matrix[i, j] = cor(donn√©es_corr[!, vars[i]], donn√©es_corr[!, vars[j]])
end

labels = ["Temp", "Pr√©cip", "Pop", "PIB", "Alpha"]
p7 = heatmap(labels, labels, cor_matrix,
    title="üîç Matrice de Corr√©lations - Variables Burkina Faso",
    color=:RdBu,
    aspect_ratio=1,
    size=(600, 500))

# Ajouter valeurs dans les cellules
for i in 1:n_vars, j in 1:n_vars
    annotate!(i, j, text(round(cor_matrix[i, j], digits=2), 10, :center, :white))
end

display(p7)

# Partie 7 : Animation Temporelle
println("\nüé¨ Partie 7 : Animation des Donn√©es Temporelles")

# Animation de l'√©volution des rendements
println("Cr√©ation d'une animation des rendements agricoles...")

# Pr√©parer l'animation
anim = Animation()

for ann√©e in ann√©es
    donn√©es_ann√©e = filter(row -> row.ann√©e == ann√©e, production_agri)
    sort!(donn√©es_ann√©e, :rendement, rev=true)

    p_anim = bar(donn√©es_ann√©e.culture, donn√©es_ann√©e.rendement,
        title="üåæ Rendements Agricoles - $ann√©e",
        xlabel="Culture",
        ylabel="Rendement (t/ha)",
        ylim=(0, 2.5),
        color=:viridis,
        legend=false,
        size=(800, 500))

    # Ajouter annotations
    for (i, row) in enumerate(eachrow(donn√©es_ann√©e))
        annotate!(i, row.rendement + 0.1,
            text("$(round(row.rendement, digits=2))", 8, :center))
    end

    frame(anim, p_anim)
end

# Sauvegarder l'animation (optionnel)
try
    gif(anim, "rendements_evolution.gif", fps=1)
    println("‚úÖ Animation sauvegard√©e : rendements_evolution.gif")
catch
    println("‚ö†Ô∏è Sauvegarde animation √©chou√©e (normal dans certains environnements)")
end

# Partie 8 : Export et Sauvegarde
println("\nüíæ Partie 8 : Export des Visualisations")

# Sauvegarder les graphiques principaux
graphiques_export = [
    (p1, "temperatures_regions_bf.png"),
    (p2, "cycle_precipitations_bf.png"),
    (p3, "evolution_rendements_bf.png"),
    (p4, "production_cultures_2023_bf.png"),
    (p5, "population_vs_pib_bf.png"),
    (p6, "carte_economique_bf.png"),
    (dashboard, "dashboard_burkina_faso.png"),
    (p7, "correlation_matrix_bf.png")
]

println("Sauvegarde des graphiques...")
saved_count = 0

for (graphique, nom_fichier) in graphiques_export
    try
        savefig(graphique, nom_fichier)
        println("‚úÖ $nom_fichier")
        saved_count += 1
    catch e
        println("‚ö†Ô∏è √âchec $nom_fichier : $e")
    end
end

println("üìä $saved_count/$(length(graphiques_export)) graphiques sauvegard√©s")

# Partie 9 : Conseils et Bonnes Pratiques
println("\nüéØ Partie 9 : Conseils pour Visualisations Professionnelles")

println("""
üìã CHECKLIST VISUALISATION PROFESSIONNELLE :
‚úÖ Titres explicites et contextualis√©s
‚úÖ Axes √©tiquet√©s avec unit√©s
‚úÖ Couleurs coh√©rentes et accessibles
‚úÖ L√©gendes claires et positionn√©es intelligemment
‚úÖ Annotations pour valeurs importantes
‚úÖ Taille de police lisible
‚úÖ Aspect ratio appropri√© au contenu
‚úÖ Backend adapt√© au contexte (statique/interactif)
""")

# D√©monstration des th√®mes
println("\nüé® D√©monstration des th√®mes disponibles :")
th√®mes_disponibles = [:default, :bright, :dark, :vibrant, :mute, :wong, :sand, :gruvbox_dark]

for th√®me in th√®mes_disponibles[1:4]  # Montrer quelques th√®mes
    theme(th√®me)
    p_demo = plot([1, 2, 3], [1, 4, 2], title="Th√®me : $th√®me", legend=false)
    display(p_demo)
end

# Retourner au th√®me bright
theme(:bright)

# Bilan d'apprentissage
println("\nüìà BILAN D'APPRENTISSAGE")
println("="^65)
println("üìä MA√éTRISE DE LA VISUALISATION SCIENTIFIQUE JULIA !")
println("="^65)
println("‚úÖ Comp√©tences de Data Visualizer d√©velopp√©es :")
println("  üé® Ma√Ætrise compl√®te de Plots.jl avec backend interactif")
println("  üìä Graphiques statistiques avanc√©s avec StatsPlots.jl")
println("  üó∫Ô∏è Cartographie th√©matique et visualisation g√©ospatiale")
println("  üìà Dashboards multi-graphiques professionnels")
println("  üîç Heatmaps et matrices de corr√©lation")
println("  üé¨ Animations temporelles pour donn√©es √©volutives")
println("  üíæ Export multi-format pour publications et pr√©sentations")
println("  üåç Contextualisation avec donn√©es burkinab√® authentiques")

println("\nüåü BADGE D√âBLOQU√â : 'Visualiseur de Donn√©es Burkina Faso'")
println("Vous savez maintenant cr√©er des visualisations percutantes")
println("qui racontent l'histoire de vos donn√©es !")

println("\nüéØ COMP√âTENCES TRANSF√âRABLES :")
println("  - Rapports d'analyse avec visualisations professionnelles")
println("  - Dashboards de monitoring en temps r√©el")
println("  - Publications scientifiques avec graphiques de qualit√©")
println("  - Pr√©sentations impactantes pour d√©cideurs")

println("\nüöÄ PR√äT POUR L'√âTAPE SUIVANTE !")
println("üìÜ PROCHAINE √âTAPE : 04_advanced_ml.jl - Machine Learning Avanc√©")
println("   (Vos visualisations seront cruciales pour valider les mod√®les ML)")
println("   (Conseil : Explorez d'autres backends comme GR() ou PyPlot() !)")